{"version":3,"sources":["components/Testing/components/Points/EndPoint/EndPoint.module.scss","components/Testing/components/Points/TestPoint/TestPoint.module.scss","components/Testing/components/Points/WelcomPoint/WelcomePoint.module.scss","components/Testing/components/Points/ContinuationPoint/ContinuationPoint.module.scss","redux/reducers/testing-reducer.js","redux/redux-store.js","components/Testing/components/Points/WelcomPoint/WelcomePoint.jsx","components/Testing/common/RadioButtonField.jsx","scripts/countFormatter.js","components/Testing/components/Points/TestPoint/TestPoint.jsx","components/Testing/components/Points/EndPoint/EndPoint.jsx","components/Testing/components/Points/ContinuationPoint/ContinuationPoint.jsx","components/Testing/components/Testing/Testing.jsx","components/Testing/components/WindowSwitch/WindowSwitch.jsx","App.js","serviceWorker.js","index.js","components/Testing/components/Testing/Testing.module.scss","components/Testing/common/RadioButton.module.scss","components/Testing/components/WindowSwitch/WindowSwitch.module.scss"],"names":["module","exports","SET_USER_ANSWERS","SET_NEXT_CURRENT_QUESTION","DROP_USER_ANSWERS","SET_TESTS_START","SET_TESTS_FINISH","initialState","testName","data","name","testQuestions","questions","questionsQuantity","length","isTestStart","currentQuestion","userAnswers","correctAnswersCounter","addAnswer","obj","property","key","Object","keys","checkAnswers","questionsArr","answersArr","map","question","questionId","value","right","currentAnswer","answers","find","answer","countRightAnswers","filter","TestingReducer","state","action","type","TestingPersistConfig","storage","whitelist","rootReducer","combineReducers","form","formReducer","testingPresistedStore","persistReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","__store__","persistor","persistStore","WelcomePoint","setBodyState","testStart","className","style","welcomePoint","welcomePoint__header","label","label_margin","welcomePoint__button","btn","btn_margin","onClick","connect","input","disabled","dispatch","radio","radio__label","placeholder","onChange","ms","Promise","resolve","setTimeout","then","submit","reset","onChangeSubmit","declOfNum","number","TestPointForm","reduxForm","handleSubmit","onSubmit","Field","component","RadioButtonField","TestPoint","testPoint","testPoint__windowHeader","testPoint__headerLabel","testPoint__headerLabel_margin","testPoint__question","testPoint__questionLabel","testPoint__questionLabel_margin","testPoint__body_margin","q","EndPoint","dropAnswers","getNumberOfCorrectAnswers","useEffect","endPoint","endPoint__margin","endPoint__TextBox","endPoint__text","endPoint__linkBox","endPoint__link","endPoint__link_margin","ContinuationPoint","testFinish","continuationPoint","continuationPoint__header","continuationPoint__buttons","setAnswers","nextQuestion","checked","useState","bodyState","setState","body","getBody","formData","testingPage","testingBox","testingBox_fixSize","testingBox_expanding","WindowSwitch","setChecked","switcherBox","switcher","onColor","uncheckedIcon","checkedIcon","App","loading","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1fa8cf5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"endPoint\":\"EndPoint_endPoint__FWEVJ\",\"endPoint__TextBox\":\"EndPoint_endPoint__TextBox__Q5m2R\",\"endPoint__linkBox\":\"EndPoint_endPoint__linkBox__3vuZ2\",\"endPoint__text\":\"EndPoint_endPoint__text__3k7j2\",\"endPoint__link\":\"EndPoint_endPoint__link__1W8NK\",\"endPoint__link_margin\":\"EndPoint_endPoint__link_margin__19PZh\",\"endPoint__margin\":\"EndPoint_endPoint__margin__2Gw_y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testPoint\":\"TestPoint_testPoint__3aSap\",\"testPoint__headerLabel\":\"TestPoint_testPoint__headerLabel__633lZ\",\"testPoint__questionLabel\":\"TestPoint_testPoint__questionLabel__AmOJx\",\"testPoint__headerLabel_margin\":\"TestPoint_testPoint__headerLabel_margin__3m1Wx\",\"testPoint__questionLabel_margin\":\"TestPoint_testPoint__questionLabel_margin__1lf_0\",\"testPoint__body_margin\":\"TestPoint_testPoint__body_margin__3JwOA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"welcomePoint\":\"WelcomePoint_welcomePoint__ws19Y\",\"label\":\"WelcomePoint_label__cS-F-\",\"welcomePoint__header\":\"WelcomePoint_welcomePoint__header__1Q1MD\",\"welcomePoint__button\":\"WelcomePoint_welcomePoint__button__3QScs\",\"label_margin\":\"WelcomePoint_label_margin__IIq7W\",\"btn\":\"WelcomePoint_btn__1DPlI\",\"btn_margin\":\"WelcomePoint_btn_margin__3Zah4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"continuationPoint\":\"ContinuationPoint_continuationPoint__3-Pt0\",\"label\":\"ContinuationPoint_label__1RanP\",\"continuationPoint__header\":\"ContinuationPoint_continuationPoint__header__2VpAO\",\"continuationPoint__buttons\":\"ContinuationPoint_continuationPoint__buttons__2YhPh\",\"label_margin\":\"ContinuationPoint_label_margin__2cXtr\",\"btn\":\"ContinuationPoint_btn__2Yo9W\"};","import data from '../../data.json'\r\n\r\nconst SET_USER_ANSWERS = 'scrumlogic_app/testing-reducer/SET-USER-ANSWERS'\r\nconst SET_NEXT_CURRENT_QUESTION =\r\n\t'scrumlogic_app/testing-reducer/SET-NEXT-CURRENT-QUESTION'\r\nconst DROP_USER_ANSWERS = 'scrumlogic_app/testing-reducer/DROP-USER-ANSWERS'\r\nconst SET_TESTS_START = 'scrumlogic_app/testing-reducer/SET-TESTS-START'\r\nconst SET_TESTS_FINISH = 'scrumlogic_app/testing-reducer/SET-TESTS-FINISH'\r\nconst GET_THE_NUMBER_OF_CORRECT_ANSWERS =\r\n\t'scrumlogic_app/testing-reducer/GET-THE-NUMBER-OF-CORRECT-ANSWERS'\r\n\r\nconst initialState = {\r\n\ttestName: data.name,\r\n\ttestQuestions: data.questions,\r\n\tquestionsQuantity: data.questions.length,\r\n\tisTestStart: false,\r\n\tcurrentQuestion: false,\r\n\tuserAnswers: [],\r\n\tcorrectAnswersCounter: 0,\r\n}\r\n\r\nconst addAnswer = (obj, property) => {\r\n\tconst key = Object.keys(property)[0]\r\n\treturn { ...obj, [key]: property[key] }\r\n}\r\n\r\nconst checkAnswers = (questionsArr, answersArr) => {\r\n\tconst createObj = (questionId, value, right) => {\r\n\t\treturn { questionId, value, right }\r\n\t}\r\n\r\n\treturn questionsArr.map(question => {\r\n\t\tconst currentAnswer = question.answers.find(\r\n\t\t\tanswer => answer.value === answersArr[`questionId_${question.questionId}`]\r\n\t\t)\r\n\t\treturn createObj(\r\n\t\t\tquestion.questionId,\r\n\t\t\tcurrentAnswer.value,\r\n\t\t\tcurrentAnswer.right\r\n\t\t)\r\n\t})\r\n}\r\n\r\nconst countRightAnswers = answers => {\r\n\treturn answers.filter(answer => answer.right).length\r\n}\r\n\r\nconst countWrongAnswers = answers => {\r\n\treturn answers.filter(answer => !answer.right).length\r\n}\r\n\r\nconst TestingReducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_NEXT_CURRENT_QUESTION: {\r\n\t\t\treturn { ...state, currentQuestion: state.currentQuestion + 1 }\r\n\t\t}\r\n\r\n\t\tcase SET_USER_ANSWERS: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tuserAnswers: addAnswer(state.userAnswers, action.value),\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase SET_TESTS_START: {\r\n\t\t\treturn { ...state, isTestStart: true, currentQuestion: 1 }\r\n\t\t}\r\n\r\n\t\tcase SET_TESTS_FINISH: {\r\n\t\t\treturn { ...state, isTestStart: false, currentQuestion: false }\r\n\t\t}\r\n\r\n\t\tcase DROP_USER_ANSWERS: {\r\n\t\t\treturn { ...state, userAnswers: [], correctAnswersCounter: 0 }\r\n\t\t}\r\n\r\n\t\tcase GET_THE_NUMBER_OF_CORRECT_ANSWERS: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcorrectAnswersCounter: countRightAnswers(\r\n\t\t\t\t\tcheckAnswers(state.testQuestions, state.userAnswers)\r\n\t\t\t\t),\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport const nextQuestion = () => ({ type: SET_NEXT_CURRENT_QUESTION })\r\n\r\nexport const setAnswers = value => ({ type: SET_USER_ANSWERS, value })\r\n\r\nexport const testStart = () => ({ type: SET_TESTS_START })\r\n\r\nexport const testFinish = () => ({ type: SET_TESTS_FINISH })\r\n\r\nexport const dropAnswers = () => ({ type: DROP_USER_ANSWERS })\r\n\r\nexport const getNumberOfCorrectAnswers = () => ({\r\n\ttype: GET_THE_NUMBER_OF_CORRECT_ANSWERS,\r\n})\r\n\r\nexport default TestingReducer\r\n","import { createStore, combineReducers } from 'redux'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport TestingReducer from './reducers/testing-reducer'\r\nimport { persistReducer, persistStore } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst TestingPersistConfig = {\r\n\tkey: 'testingPresistedStore',\r\n\tstorage,\r\n\twhitelist: ['testName', 'isTestStart', 'currentQuestion', 'userAnswers'],\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n\tform: formReducer,\r\n\ttestingPresistedStore: persistReducer(TestingPersistConfig, TestingReducer),\r\n})\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n\r\nwindow.__store__ = store\r\n\r\nexport const persistor = persistStore(store)\r\n\r\nexport default store\r\n","import React from 'react'\r\nimport style from './WelcomePoint.module.scss'\r\n\r\nconst WelcomePoint = ({\r\n\tsetBodyState,\r\n\ttestName,\r\n\ttestStart,\r\n\tisTestStart,\r\n\tcurrentQuestion,\r\n}) => {\r\n\tif (isTestStart && currentQuestion > 0) {\r\n\t\tsetBodyState(4)\r\n\t}\r\n\tconst startClickTest = () => {\r\n\t\tsetBodyState(2)\r\n\t\ttestStart()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={style.welcomePoint}>\r\n\t\t\t<div className={style.welcomePoint__header}>\r\n\t\t\t\t<p className={`${style.label} ${style.label_margin}`}>{testName}</p>\r\n\t\t\t</div>\r\n\t\t\t<div className={style.welcomePoint__button}>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={`${style.btn} ${style.btn_margin}`}\r\n\t\t\t\t\tonClick={startClickTest}\r\n\t\t\t\t>\r\n\t\t\t\t\tПройти тест\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default WelcomePoint\r\n","import React from 'react'\r\nimport { reset, submit } from 'redux-form'\r\nimport { connect } from 'react-redux'\r\nimport style from './RadioButton.module.scss'\r\n\r\nconst RadioButtonField = ({ input, type, disabled, dispatch }) => {\r\n\tconst onChangeSubmit = () => {\r\n\t\tinput.onChange(input.value)\r\n\t\tconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\n\t\treturn sleep(1).then(() => {\r\n\t\t\tdispatch(submit('testPoint'))\r\n\t\t\tdispatch(reset('testPoint'))\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={style.radio}>\r\n\t\t\t<label className={style.radio__label}>\r\n\t\t\t\t<input\r\n\t\t\t\t\t{...input}\r\n\t\t\t\t\ttype={type}\r\n\t\t\t\t\tplaceholder={'test'}\r\n\t\t\t\t\tvalue={input.value}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\tonChange={() => onChangeSubmit()}\r\n\t\t\t\t/>\r\n\t\t\t\t{input.value}\r\n\t\t\t</label>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default connect()(RadioButtonField)\r\n","export const declOfNum = number => {\r\n\tconst cases = [2, 0, 1, 1, 1, 2]\r\n\tconst titles = ['вопрос', 'вопроса', 'вопросов']\r\n\treturn titles[\r\n\t\tnumber % 100 > 4 && number % 100 < 20\r\n\t\t\t? 2\r\n\t\t\t: cases[number % 10 < 5 ? number % 10 : 5]\r\n\t]\r\n}\r\n","import React from 'react'\r\nimport style from './TestPoint.module.scss'\r\nimport RadioButtonField from '../../../common/RadioButtonField'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { declOfNum } from '../../../../../scripts/countFormatter'\r\n\r\nconst TestPoint = ({\r\n\tonSubmit,\r\n\ttestQuestions,\r\n\tquestionsQuantity,\r\n\tcurrentQuestion,\r\n}) => {\r\n\t//console.log(testQuestions[currentQuestion - 1]) // -1 т.к. это массив\r\n\tconst question = testQuestions[currentQuestion - 1]\r\n\r\n\treturn (\r\n\t\t<div className={style.testPoint}>\r\n\t\t\t<div className={style.testPoint__windowHeader}>\r\n\t\t\t\t<p\r\n\t\t\t\t\tclassName={`${style.testPoint__headerLabel} ${style.testPoint__headerLabel_margin}`}\r\n\t\t\t\t>\r\n\t\t\t\t\tПройдено {currentQuestion} {declOfNum(currentQuestion)} из{' '}\r\n\t\t\t\t\t{questionsQuantity}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className={style.testPoint__question}>\r\n\t\t\t\t<p\r\n\t\t\t\t\tclassName={`${style.testPoint__questionLabel} ${style.testPoint__questionLabel_margin}`}\r\n\t\t\t\t>\r\n\t\t\t\t\tВопрос №{currentQuestion}: {question.question}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className={style.testPoint__body_margin}>\r\n\t\t\t\t{question.answers.map((q, key) => (\r\n\t\t\t\t\t<TestPointForm\r\n\t\t\t\t\t\tkey={key}\r\n\t\t\t\t\t\tonSubmit={onSubmit}\r\n\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\tvalue={q.value}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst TestForm = ({ handleSubmit, question, value }) => {\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<Field\r\n\t\t\t\tname={`questionId_${question.questionId}`}\r\n\t\t\t\ttype='radio'\r\n\t\t\t\tcomponent={RadioButtonField}\r\n\t\t\t\tvalue={value}\r\n\t\t\t/>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nconst TestPointForm = reduxForm({\r\n\tform: 'testPoint',\r\n})(TestForm)\r\n\r\nexport default TestPoint\r\n","import React, { useEffect } from 'react'\r\nimport { declOfNum } from '../../../../../scripts/countFormatter'\r\nimport style from './EndPoint.module.scss'\r\n\r\nconst EndPoint = ({\r\n\tsetBodyState,\r\n\tquestionsQuantity,\r\n\tdropAnswers,\r\n\tgetNumberOfCorrectAnswers,\r\n\tcorrectAnswersCounter,\r\n}) => {\r\n\tuseEffect(() => {\r\n\t\tgetNumberOfCorrectAnswers()\r\n\t})\r\n\r\n\tconst startNewTest = () => {\r\n\t\tdropAnswers()\r\n\t\tsetBodyState(1)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={`${style.endPoint} ${style.endPoint__margin}`}>\r\n\t\t\t<div className={style.endPoint__TextBox}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p className={style.endPoint__text}>Тест завершен.</p>\r\n\t\t\t\t\t<p className={style.endPoint__text}>Вы правильно ответили</p>\r\n\t\t\t\t\t<p className={style.endPoint__text}>\r\n\t\t\t\t\t\tна {correctAnswersCounter} {declOfNum(correctAnswersCounter)} из{' '}\r\n\t\t\t\t\t\t{questionsQuantity}.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className={style.endPoint__linkBox}>\r\n\t\t\t\t<p\r\n\t\t\t\t\tclassName={`${style.endPoint__link} ${style.endPoint__link_margin}`}\r\n\t\t\t\t\tonClick={() => startNewTest()}\r\n\t\t\t\t>\r\n\t\t\t\t\tПройти тест заново\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default EndPoint\r\n","import React from 'react'\nimport style from './ContinuationPoint.module.scss'\n\nconst ContinuationPoint = ({ setBodyState, dropAnswers, testFinish }) => {\n\tconst continueTest = () => {\n\t\tsetBodyState(2)\n\t}\n\n\tconst restartTest = () => {\n\t\ttestFinish()\n\t\tdropAnswers()\n\t\tsetBodyState(1)\n\t}\n\n\treturn (\n\t\t<div className={style.continuationPoint}>\n\t\t\t<div className={style.continuationPoint__header}>\n\t\t\t\t<p className={`${style.label} ${style.label_margin}`}>\n\t\t\t\t\tВы хотите продолжить тестирование или начать заново?\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div className={style.continuationPoint__buttons}>\n\t\t\t\t<button className={style.btn} onClick={continueTest}>\n\t\t\t\t\tПродолжить\n\t\t\t\t</button>\n\t\t\t\t<button className={style.btn} onClick={restartTest}>\n\t\t\t\t\tНачать заново\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\nexport default ContinuationPoint\n","import React, { useState } from 'react'\r\nimport style from './Testing.module.scss'\r\nimport WelcomePoint from '../Points/WelcomPoint/WelcomePoint'\r\nimport TestPoint from '../Points/TestPoint/TestPoint'\r\nimport EndPoint from '../Points/EndPoint/EndPoint'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n\tsetAnswers,\r\n\tdropAnswers,\r\n\tgetNumberOfCorrectAnswers,\r\n\ttestFinish,\r\n\ttestStart,\r\n\tnextQuestion,\r\n} from '../../../../redux/reducers/testing-reducer'\r\nimport ContinuationPoint from '../Points/ContinuationPoint/ContinuationPoint'\r\n\r\nconst getBody = (\r\n\tbodyState,\r\n\tsetBodyState,\r\n\tonSubmit,\r\n\ttestQuestions,\r\n\ttestName,\r\n\tquestionsQuantity,\r\n\tisTestStart,\r\n\tcurrentQuestion,\r\n\ttestStart,\r\n\tdropAnswers,\r\n\tgetNumberOfCorrectAnswers,\r\n\tcorrectAnswersCounter,\r\n\ttestFinish\r\n) => {\r\n\tswitch (bodyState) {\r\n\t\tcase 1:\r\n\t\t\treturn (\r\n\t\t\t\t<WelcomePoint\r\n\t\t\t\t\tsetBodyState={setBodyState}\r\n\t\t\t\t\ttestName={testName}\r\n\t\t\t\t\ttestStart={testStart}\r\n\t\t\t\t\tisTestStart={isTestStart}\r\n\t\t\t\t\tcurrentQuestion={currentQuestion}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\tcase 2:\r\n\t\t\treturn (\r\n\t\t\t\t<TestPoint\r\n\t\t\t\t\tsetBodyState={setBodyState}\r\n\t\t\t\t\tonSubmit={onSubmit} // ответить на вопрос\r\n\t\t\t\t\ttestQuestions={testQuestions} // массив с вопросами\r\n\t\t\t\t\tquestionsQuantity={questionsQuantity} // общее количество вопросов\r\n\t\t\t\t\tcurrentQuestion={currentQuestion} // текущий вопрос\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\tcase 3:\r\n\t\t\treturn (\r\n\t\t\t\t<EndPoint\r\n\t\t\t\t\tsetBodyState={setBodyState}\r\n\t\t\t\t\tquestionsQuantity={questionsQuantity}\r\n\t\t\t\t\tdropAnswers={dropAnswers}\r\n\t\t\t\t\tgetNumberOfCorrectAnswers={getNumberOfCorrectAnswers}\r\n\t\t\t\t\tcorrectAnswersCounter={correctAnswersCounter}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\tcase 4:\r\n\t\t\treturn (\r\n\t\t\t\t<ContinuationPoint\r\n\t\t\t\t\tsetBodyState={setBodyState}\r\n\t\t\t\t\tdropAnswers={dropAnswers}\r\n\t\t\t\t\ttestFinish={testFinish}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\tdefault:\r\n\t\t\treturn <WelcomePoint setBodyState={setBodyState} />\r\n\t}\r\n}\r\n\r\nconst Testing = ({\r\n\ttestQuestions,\r\n\ttestName,\r\n\tquestionsQuantity,\r\n\tisTestStart,\r\n\tcurrentQuestion,\r\n\tsetAnswers,\r\n\ttestStart,\r\n\ttestFinish,\r\n\tdropAnswers,\r\n\tgetNumberOfCorrectAnswers,\r\n\tcorrectAnswersCounter,\r\n\tnextQuestion,\r\n\tchecked,\r\n}) => {\r\n\tconst [bodyState, setState] = useState(1)\r\n\r\n\tconst onSubmit = formData => {\r\n\t\tnextQuestion()\r\n\t\tsetAnswers(formData)\r\n\t\tif (currentQuestion === questionsQuantity) {\r\n\t\t\ttestFinish()\r\n\t\t\tsetState(3)\r\n\t\t}\r\n\t}\r\n\r\n\tconst body = getBody(\r\n\t\tbodyState,\r\n\t\tsetState,\r\n\t\tonSubmit,\r\n\t\ttestQuestions,\r\n\t\ttestName,\r\n\t\tquestionsQuantity,\r\n\t\tisTestStart,\r\n\t\tcurrentQuestion,\r\n\t\ttestStart,\r\n\t\tdropAnswers,\r\n\t\tgetNumberOfCorrectAnswers,\r\n\t\tcorrectAnswersCounter,\r\n\t\ttestFinish\r\n\t)\r\n\r\n\treturn (\r\n\t\t<div className={style.testingPage}>\r\n\t\t\t<div\r\n\t\t\t\tclassName={`${style.testingBox} ${\r\n\t\t\t\t\tchecked ? style.testingBox_fixSize : style.testingBox_expanding\r\n\t\t\t\t}`}\r\n\t\t\t>\r\n\t\t\t\t{body}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\ttestQuestions: state.testingPresistedStore.testQuestions,\r\n\ttestName: state.testingPresistedStore.testName,\r\n\tquestionsQuantity: state.testingPresistedStore.questionsQuantity,\r\n\tisTestStart: state.testingPresistedStore.isTestStart,\r\n\tcurrentQuestion: state.testingPresistedStore.currentQuestion,\r\n\tcorrectAnswersCounter: state.testingPresistedStore.correctAnswersCounter,\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n\tsetAnswers,\r\n\ttestStart,\r\n\ttestFinish,\r\n\tdropAnswers,\r\n\tgetNumberOfCorrectAnswers,\r\n\tnextQuestion,\r\n})(Testing)\r\n","import React, { useState } from 'react'\r\nimport Switch from 'react-switch'\r\nimport style from './WindowSwitch.module.scss'\r\n\r\nconst WindowSwitch = ({ checked, setChecked }) => {\r\n\treturn (\r\n\t\t<div className={style.switcherBox}>\r\n\t\t\t<span>Зафиксировать размер окна</span>\r\n\t\t\t<Switch\r\n\t\t\t\tclassName={style.switcher}\r\n\t\t\t\tonChange={setChecked}\r\n\t\t\t\tchecked={checked}\r\n\t\t\t\tonColor={'#296faf'}\r\n\t\t\t\tuncheckedIcon={false}\r\n\t\t\t\tcheckedIcon={false}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default WindowSwitch\r\n","import React, { useState } from 'react'\nimport './App.css'\nimport { Provider } from 'react-redux'\nimport store, { persistor } from './redux/redux-store'\nimport Testing from './components/Testing/components/Testing/Testing'\nimport WindowSwitch from './components/Testing/components/WindowSwitch/WindowSwitch'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nfunction App() {\n\tconst [checked, setChecked] = useState(false)\n\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<PersistGate loading={<div>Loading</div>} persistor={persistor}>\n\t\t\t\t<div className='App'>\n\t\t\t\t\t<WindowSwitch checked={checked} setChecked={setChecked} />\n\t\t\t\t\t<Testing checked={checked} />\n\t\t\t\t</div>\n\t\t\t</PersistGate>\n\t\t</Provider>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testingPage\":\"Testing_testingPage__3IDRh\",\"testingBox\":\"Testing_testingBox__36mlv\",\"testingBox_fixSize\":\"Testing_testingBox_fixSize__2gg8-\",\"testingBox_expanding\":\"Testing_testingBox_expanding__2_LKT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"radio\":\"RadioButton_radio__1H3zx\",\"radio__label\":\"RadioButton_radio__label__3Nlpx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switcherBox\":\"WindowSwitch_switcherBox__18TUq\",\"switcher\":\"WindowSwitch_switcher__32soU\"};"],"sourceRoot":""}